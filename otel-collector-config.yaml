receivers:
  # StatsD receiver for metrics
  statsd:
    endpoint: "0.0.0.0:8125"
    aggregation_interval: 60s
    enable_metric_type: true
    is_monotonic_counter: false
    timer_histogram_mapping:
      - statsd_type: "histogram"
        observer_type: "histogram"
      - statsd_type: "timing"
        observer_type: "histogram"

  # OTLP receiver for traces and logs
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"

  # Prometheus receiver to scrape collector's own metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8888']

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512

  # Resource attributes for metrics
  resource/metrics:
    attributes:
      - key: service.name
        value: statsd-service
        action: upsert
      - key: deployment.environment
        value: demo
        action: upsert

exporters:
  # Honeycomb exporter for metrics
  otlp/metrics:
    endpoint: "api.honeycomb.io:443"
    headers:
      "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
      "x-honeycomb-dataset": "demo-metrics"

  # Honeycomb exporter for traces
  # Note: Traces dataset is auto-named by Honeycomb based on service.name
  otlp/traces:
    endpoint: "api.honeycomb.io:443"
    headers:
      "x-honeycomb-team": "${HONEYCOMB_API_KEY}"

  # Honeycomb exporter for logs
  otlp/logs:
    endpoint: "api.honeycomb.io:443"
    headers:
      "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
      "x-honeycomb-dataset": "demo-logs"

  # Debug exporter for local debugging (no sampling)
  debug:
    verbosity: detailed

service:
  pipelines:
    # Metrics pipeline
    metrics:
      receivers: [statsd, otlp, prometheus]
      processors: [memory_limiter, batch, resource/metrics]
      exporters: [otlp/metrics, debug]

    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp/traces, debug]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp/logs, debug]

  telemetry:
    logs:
      level: debug
